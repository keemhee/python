{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Ff23JOSSTK8DRzNZ9D28ELehPAplkVe1","timestamp":1728289336782}],"collapsed_sections":["dum2q7FspK96","SfraAYgutKv_","QKoTSPpKveX3","YQFMnOmkxr4m","xYCibRc-ysDb","gXxa5LYQzwO7","pKXZTMG_vc4k","E7ZaMjoOx2eD","VPzHlbXyOfbn","k_iXVZcR64Ot","nVbvcasZBnQT","7MeuhEXPIGKl","uyVNRNvR97SY","BS9ous4q-cTj","m2FLXklTAYke"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### 1. 영어단어가 포함된 리스트가 주어질 때, 각 알파벳이 사용된 횟수를 딕셔너리에 저장하기"],"metadata":{"id":"dum2q7FspK96"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sg7pblxWowpU","executionInfo":{"status":"ok","timestamp":1728081283049,"user_tz":-540,"elapsed":442,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"44caac9f-44ef-4dfb-aa31-a959fc5debef"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'R': 2, 'a': 1, 'i': 3, 'n': 2, 'd': 1, 'r': 2, 'o': 2, 'p': 1, 's': 6, 'e': 3, 'W': 1, 'h': 1, 'k': 1, 'K': 1, 't': 2}\n"]}],"source":["word_list = ['Raindrops', 'Roses', 'Whiskers', 'Kittens']\n","count = {}\n","# 리스트의 영어 단어들의 알파벳 사용 횟수를 계산\n","# count 딕셔너리에 { 알파벳 : 사용횟수 } 형식으로 저장하기\n","temp = [ch for word in word_list for ch in word]\n","\n","for ch in temp:\n","    if ch in count:\n","        count[ch] += 1\n","    else:\n","        count[ch] = 1\n","\n","print(count)"]},{"cell_type":"markdown","source":["- temp = [ch for word in word_list for ch in word]\n","    - for word in word_list -> 리스트 원소(단어)가 word에 하나씩\n","    - for ch in word -> word의 알파벳이 ch에 하나씩\n","    - temp에는 결국 word_list의 각 원소의 알파벳이 모두 추가된 리스트가 됨\n","- for ch in temp:\n","    - temp에서 글자 하나씩 뽑아서 ch로 가져오며 반복\n","    - if ch in count:\n","        - ch 키가 count 딕셔너리에 있는 경우 count[ch] += 1\n","        - 아닌 경우 count[ch] = 1\n","- 반복문 종료 시 temp 안의 모든 알파벳의 원소를 세서 빈도를 count에 저장한 상태"],"metadata":{"id":"er4Z2D6hrZ00"}},{"cell_type":"markdown","source":["### 2. 무작위로 복권 번호 6개를 뽑는 함수 만들기"],"metadata":{"id":"SfraAYgutKv_"}},{"cell_type":"code","source":["import random\n","\n","def generate_lottery_numbers():\n","    lottery_numbers = []\n","    count = 0\n","    # 복권 번호 6개 뽑아서 lottery_numbers에 저장하기\n","    while count < 6:\n","        num = random.randint(1, 45)\n","        if num not in lottery_numbers:\n","            lottery_numbers.append(num)\n","            count += 1\n","    return lottery_numbers\n","\n","print(generate_lottery_numbers())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e0M2NJIOrL2T","executionInfo":{"status":"ok","timestamp":1728082593065,"user_tz":-540,"elapsed":422,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"7457341b-539e-427f-a2f7-86fc3be33433"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[14, 27, 45, 29, 21, 35]\n"]}]},{"cell_type":"code","source":["for i in range(30):\n","    print(f'{i+1}회 : {generate_lottery_numbers()}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7UFCP913vh1V","executionInfo":{"status":"ok","timestamp":1728082595919,"user_tz":-540,"elapsed":488,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"0bf02a3a-043c-4f2d-9ec5-82b479700194"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1회 : [7, 1, 33, 31, 45, 18]\n","2회 : [27, 33, 17, 16, 14, 3]\n","3회 : [6, 7, 39, 34, 44, 21]\n","4회 : [15, 26, 41, 30, 33, 21]\n","5회 : [42, 9, 34, 25, 21, 43]\n","6회 : [13, 32, 35, 19, 37, 26]\n","7회 : [6, 9, 42, 36, 15, 45]\n","8회 : [22, 45, 32, 6, 28, 24]\n","9회 : [40, 21, 5, 35, 1, 45]\n","10회 : [39, 31, 4, 14, 45, 11]\n","11회 : [17, 5, 18, 25, 38, 19]\n","12회 : [23, 16, 21, 22, 6, 34]\n","13회 : [43, 45, 37, 35, 6, 27]\n","14회 : [9, 34, 43, 14, 2, 31]\n","15회 : [21, 13, 6, 30, 41, 39]\n","16회 : [26, 10, 31, 34, 5, 33]\n","17회 : [34, 16, 22, 28, 41, 3]\n","18회 : [6, 7, 29, 11, 24, 40]\n","19회 : [25, 24, 22, 23, 8, 20]\n","20회 : [45, 4, 36, 38, 41, 28]\n","21회 : [8, 6, 7, 2, 31, 28]\n","22회 : [43, 13, 31, 29, 20, 41]\n","23회 : [29, 43, 6, 44, 23, 10]\n","24회 : [17, 6, 26, 28, 42, 22]\n","25회 : [22, 7, 25, 24, 35, 2]\n","26회 : [17, 42, 41, 18, 3, 28]\n","27회 : [2, 13, 16, 38, 6, 22]\n","28회 : [5, 28, 39, 34, 7, 42]\n","29회 : [16, 1, 21, 18, 9, 7]\n","30회 : [30, 29, 19, 32, 26, 21]\n"]}]},{"cell_type":"markdown","source":["- 6개의 숫자를 중복 없이 뽑아야 함\n","    - for에 range()를 통해 반복문을 6회 돌리는 경우 숫자를 6개 뽑지만 같은 숫자가 나오는 경우에 문제가 됨\n","    - 추가한 숫자를 세는 count 변수를 두고 while을 사용하여 6개를 채우기 전까지 반복\n","- 1-45의 자연수로만 구성\n","    - random 모듈을 추가하고, random.randint()를 통해 무작위로 수를 뽑고,\n","    - 해당 숫자가 lottery_numbers 리스트에 없는 경우에만 숫자를 리스트에 추가하고 count를 증가\n","- 숫자 6개가 추가되어 while문을 빠져나오면 리스트를 return하고 함수가 종료\n"],"metadata":{"id":"tSFYPXlKuJSm"}},{"cell_type":"markdown","source":["### 3. 피보나치 수열 10개까지 리스트에 저장하기"],"metadata":{"id":"QKoTSPpKveX3"}},{"cell_type":"code","source":["fibonacci_numbers = []\n","# 피보나치 수열을 만들어서 fibonacci_numbers에 저장하기\n","fibonacci_numbers.extend([1, 1])\n","for i in range(2, 10):\n","    fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n","\n","print(fibonacci_numbers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KzonwQ4OtXmC","executionInfo":{"status":"ok","timestamp":1728082800517,"user_tz":-540,"elapsed":418,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"ab4983a3-beb9-4f4a-a32b-ba1a72597549"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n"]}]},{"cell_type":"markdown","source":["- fibonacci_numbers.extend([1, 1])\n","    - 처음 두 원소를 1로 추가하기\n","- for i in range(2, 10):\n","    - 10개까지 추가해야해서 헷갈리지 않도록 추가하는 index와 맞추어 range 범위 설정\n","    - fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n","        - i-1 인덱스의 원소와 i-2 인덱스의 원소를 더한 값을 리스트에 추가"],"metadata":{"id":"SeSBa1g2wyR9"}},{"cell_type":"markdown","source":["### 4. 주어진 배열의 값을 슬라이싱하여 주어진 그림과 같이 만들기"],"metadata":{"id":"YQFMnOmkxr4m"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","image = np.zeros((20, 20), dtype='uint8')\n","# 격자무늬로 출력되도록 적절히 슬라이싱해서 값 1로 바꾸기\n","image[::2,::2] = 1\n","image[1::2,1::2] = 1\n","print(image)\n","\n","plt.imshow(image, cmap = 'gray')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":805},"id":"JyNnlSJ6wUUH","executionInfo":{"status":"ok","timestamp":1728083126436,"user_tz":-540,"elapsed":911,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"6a441deb-afc0-438b-cb2a-dc52993fb554"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]]\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7cf14d5c4400>"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["- image[::2,::2] = 1\n","    - 짝수 좌표인 지점 흰색으로 (0,0), (0,2), ... / (2,0), (2,2), ... / ...\n","- image[1::2,1::2] = 1\n","    - 홀수 좌표인 지점 흰색으로 (1,1), (1,3), ... / (3,1), (3,3) ... / ..."],"metadata":{"id":"9DQu-jGqyGJs"}},{"cell_type":"markdown","source":["### 5. 두 리스트의 값으로 딕셔너리 만들기"],"metadata":{"id":"xYCibRc-ysDb"}},{"cell_type":"code","source":["key_list = ['a', 'b', 'c', 'd', 'e']\n","value_list = [1, 2, 3, 4, 5]\n","# 두 리스트를 사용해 딕셔너리 만들기"],"metadata":{"id":"WfFGrs6Yx-J7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 방법1\n","dict2_1 = dict(zip(key_list, value_list))\n","print(dict2_1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z-I6FrVbyyLc","executionInfo":{"status":"ok","timestamp":1728083523387,"user_tz":-540,"elapsed":637,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"33fa9275-52db-44bb-825a-afbf1328118a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"]}]},{"cell_type":"code","source":["# 방법2\n","dict2_2 = {k:v for k, v in zip(key_list, value_list)}\n","print(dict2_2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kvgNQDaSy2RG","executionInfo":{"status":"ok","timestamp":1728083525535,"user_tz":-540,"elapsed":438,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"d59a70ae-dafb-403e-e6e8-c0ed4e9a61e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"]}]},{"cell_type":"code","source":["# 방법3\n","dict2_3 = {}\n","for k, v in zip(key_list, value_list):\n","    dict2_3[k] = v\n","print(dict2_3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NkOQ2xpGy6bC","executionInfo":{"status":"ok","timestamp":1728083527434,"user_tz":-540,"elapsed":455,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"3d85914f-0621-4677-ae62-d4a0c131f210"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"]}]},{"cell_type":"code","source":["# 방법4\n","dict2_4 = {}\n","for i in range(len(key_list)):\n","    dict2_4[key_list[i]] = value_list[i]\n","print(dict2_4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6k6QkGpiy7Tj","executionInfo":{"status":"ok","timestamp":1728083533477,"user_tz":-540,"elapsed":614,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"aa95eedd-d808-48ab-f88b-6a8950617ef6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"]}]},{"cell_type":"markdown","source":["- 여러 방법이 있을 것 같아서 생각나는 방법 4개만 써 봤습니다."],"metadata":{"id":"aCvNTtG3zjLD"}},{"cell_type":"markdown","source":["### 6. 딕셔너리의 내용을 사용해 주어진 형식으로 출력하기"],"metadata":{"id":"gXxa5LYQzwO7"}},{"cell_type":"code","source":["dict_capital = {'대한민국': '서울', '일본': '도쿄', '중국': '베이징', '영국': '런던', '프랑스': '파리'}\n","# 조건에 맞춰 출력하기\n","for v in dict_capital:\n","    print(f'{v}의 수도는 {dict_capital[v]}입니다.')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-QHMjjbAzsrZ","executionInfo":{"status":"ok","timestamp":1728099158450,"user_tz":-540,"elapsed":970,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"9b314636-ceda-4b02-e87c-6abdb97ab639"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["대한민국의 수도는 서울입니다.\n","일본의 수도는 도쿄입니다.\n","중국의 수도는 베이징입니다.\n","영국의 수도는 런던입니다.\n","프랑스의 수도는 파리입니다.\n"]}]},{"cell_type":"markdown","source":["- 딕셔너리를 순회하면서 f-string을 활용해 형식을 맞춰 출력"],"metadata":{"id":"54dotkKmvQNm"}},{"cell_type":"markdown","source":["### 7. 학생 이름과 점수를 입력받아 딕셔너리에 추가하는 함수 만들기"],"metadata":{"id":"pKXZTMG_vc4k"}},{"cell_type":"code","source":["stu_dict = {}\n","def add_student_info():\n","    stu_dict = {}\n","    # 입력할 학생 수 입력받기\n","    num = int(input('입력할 학생 수 >> '))\n","    # 입력받은 횟수만큼\n","    for i in range(num):\n","        # 학생 이름 입력받기\n","        name = input('학생의 이름을 입력하세요 >> ').strip()\n","        # 해당 학생의 점수 입력받기(실수)\n","        score = float(input(f'{name}의 점수를 입력하세요 >> ').strip())\n","        # '이름' : 점수 형식으로 stu_dict 딕셔너리에 추가하기\n","        stu_dict[name] = score\n","    return stu_dict\n","\n","print(add_student_info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PQE3FdKwvbK_","executionInfo":{"status":"ok","timestamp":1728099530920,"user_tz":-540,"elapsed":60729,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"2938b7e4-9bef-45cc-be64-73a0a41bbee7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["입력할 학생 수 >> 4\n","학생의 이름을 입력하세요 >> 홍길동\n","홍길동의 점수를 입력하세요 >> 75\n","학생의 이름을 입력하세요 >> 김철수\n","김철수의 점수를 입력하세요 >> 63\n","학생의 이름을 입력하세요 >> 이영희\n","이영희의 점수를 입력하세요 >> 56\n","학생의 이름을 입력하세요 >> 박민수\n","박민수의 점수를 입력하세요 >> 82\n","{'홍길동': 75.0, '김철수': 63.0, '이영희': 56.0, '박민수': 82.0}\n"]}]},{"cell_type":"markdown","source":["- input을 통해 입력받을 학생 수를 받아 str -> int로 변환해서 저장\n","- 저장한 변수를 통해 횟수만큼 반복\n","    - 이름의 경우 input을 통해 입력\n","    - 점수의 경우 input을 통해 입력받아 int나 float을 사용해 변환\n","    - 이름 : 점수 모양으로 저장\n","- 딕셔너리를 return"],"metadata":{"id":"cTA94BkRw7pP"}},{"cell_type":"markdown","source":["### 8. 사용자가 입력하는 숫자를 더하는 프로그램 만들기"],"metadata":{"id":"E7ZaMjoOx2eD"}},{"cell_type":"code","source":["def add_num():\n","    number_sum = 0\n","    # 조건에 따라 값을 계속 입력받기\n","    while True:\n","        num = input('더할 숫자를 입력하세요(-1 입력시 종료) >> ').strip()\n","    # -1이 입력되는 경우 멈추기\n","        if num:\n","            num = float(num)\n","            if num == -1:\n","                print(f'입력한 숫자의 합은 {number_sum} 입니다.\\n프로그램 종료')\n","                break\n","            else:\n","                number_sum += num\n","        else:\n","            print('값을 입력하세요')\n","\n","    return number_sum\n","\n","print(add_num())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c5esvthRxymW","executionInfo":{"status":"ok","timestamp":1728100035908,"user_tz":-540,"elapsed":11221,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"062acf5b-81a0-4015-ecb8-530c41db783d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["더할 숫자를 입력하세요(-1 입력시 종료) >> 3\n","더할 숫자를 입력하세요(-1 입력시 종료) >> 15\n","더할 숫자를 입력하세요(-1 입력시 종료) >> 8\n","더할 숫자를 입력하세요(-1 입력시 종료) >> \n","값을 입력하세요\n","더할 숫자를 입력하세요(-1 입력시 종료) >> -1\n","입력한 숫자의 합은 26.0 입니다.\n","프로그램 종료\n","26.0\n"]}]},{"cell_type":"markdown","source":["### 9. cv2로 일본 국기 만들기"],"metadata":{"id":"VPzHlbXyOfbn"}},{"cell_type":"code","source":["import cv2\n","from google.colab.patches import cv2_imshow\n","import numpy as np"],"metadata":{"id":"_BgkExwuOgcs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["img = np.zeros((200,300,3), dtype='uint8')\n","img[:,:] = [255,255,255]\n","cv2.circle(img, (150, 100), 60, (0,0,254), -1)\n","cv2_imshow(img)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":217},"id":"nMkk6Yy10zi5","executionInfo":{"status":"ok","timestamp":1728185211040,"user_tz":-540,"elapsed":366,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"6c41f9c8-9d5d-4bd7-cd2a-ea2fb4f35391"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=300x200>"],"image/png":"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\n","image/jpeg":"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cuWKwjqx+KGvquq/X/hz3WiiivaPzEKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACvOfjDqzWnh2102MsGvpsvhQVMceCQSeQdxQ8eh/H0avFfjNdTP4jsLRnzBFaeYi4HDM7BjnryEX8q5sZLlos9zhygq2Y077K7+5afjY82ooorwj9VCiiigAooooAKKKKACiiigAooooAKmtbqayvILu3fZPBIskbYB2spyDg8dRUNFAmk1Zn1Xp95HqOm2t9CrLFcwpMgcYYBgCM4781YrmPh3dTXfgLSZJ33usbRg4A+VHZVHHoqgfhXT19HTlzQUu5+LYqj7GvOl/K2vudgoooqzAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK8M+MJkPjGDeiqosk2FWyWG9+SMDBzkY54AOecD3OvEvjLFIPFNlMY2ETWSqrkfKSHckA+o3D8x61x47+CfR8KtLMV6M85ooorxT9OCiiigAooooAKKKKACiiigAooooAKKKKAPoP4YGQ/D/T96KqhpdhVslh5jckYGDnIxzwAc84HYVyvw3ikh+H+lLLGyMVkYBhg4MjEH6EEEexrqq+hofwo+iPxzM2njqzX80vzYUUUVqcIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAV5n8ZdMkuNF0/Uk3FbSZo3VUyAJAPmJ7AFAPcsPx9MrO13SIde0O80uc7UuI9obk7GHKtgEZwwBxnnFZV6ftKbid+WYv6pi6dd7J6+j0f4Hy7RT5YpIJnhmjaOWNiro4wykcEEHoaZXzx+wp31QUUUUDCiiigAooooAKKKKACiiigAp8UUk8yQwxtJLIwVEQZZieAAB1NMrtfhfoa6v4ujuJkY29gv2gkKdpkBGwEgjBz83vsIx1q6cHOaiupzYzExwtCdeW0Vc9z0qx/szSLKw8zzPssEcO/bjdtUDOO2cVboor6JKysj8ZlJzk5S3YUUUUyQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA8a+LPhT7JeJr1jbYt5uLzy14STPDnn+LOOgGRyctXmNfVd/YWup2M1lewLPbTLteNuhH9D3BHIPNfP3jXwVdeE77cpafTZmxBcEcg9dj+jfoRyO4HkY3DuL9pHY/Q+Gs5jWprCVn7628129V+XzOVooorgPrgooooAKKKKACiiigAooooAfFFJPMkMMbSSyMFREGWYngAAdTX0Z4I8Mx+GfDsEDRKt9Moku3A+YuedpOTkLnbwcdT3Ncr8O/h39g8rW9bh/0vh7a1cf6n0dh/f8AQfw9ev3fTq9bBYdw9+W5+ecTZzHEv6rQd4rd93/kvz9Aooor0D5EKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAqvf2FrqdjNZXsCz20y7XjboR/Q9wRyDzViihq+jHGTi1KLs0eA+LvhxqXh1pLq0Vr3TdzEOikyRKBnMgA4HX5hxxztyBXFV9Z1xviH4aaFr1xNeKJbK8l3M0kBG13I4ZlPHUZONucnJyc15lbAdaf3H2+WcWWSp41f9vL9V+q+4+fqK7jWPhV4i03fJaxxahAu9swNhwo6ZRsHJHZd3THpnkr7StR0zy/t9hdWnmZ2efC0e7GM4yOcZH51586U4fErH12Hx2GxKvRmn89fu3KlFFFQdYUVs2HhLxDqTQi10a8ZZl3RyNEUjYYyDvbC4I6c813Gh/By6lZZdcvVgiKg+RandJkg5BYjapBx03A8/WtYUKk/hR52KzbB4VXq1FfstX9yPNLW1uL24S3tLeWed87Y4kLs2Bk4A56AmvZPAvw0/se4TVNbEUt4mGggU7lhOM7mPQuDwMZAxkEnBHZ6B4a0vwzZtb6Zb+XvwZZGO55CBjLH8zgYAycAZrWr08PglD3p6s+Jzbiapik6OHXLB7vq/8AL+vQKKKK7j5UKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAZJFHMoWWNXUMrAMMjIIIP1BAI9xT6KKAv0CiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//Z\n"},"metadata":{}}]},{"cell_type":"markdown","source":["- np.zeros() 를 사용해서 200(세로) * 300(가로) * 3(RGB) 배열 만들기\n","- 전체를 255,255,255(흰색) 으로 바꾸기\n","- cv2.circle() 을 사용해서 중심의 원 그리기\n","    - img에 그릴 것이므로 **img**\n","    - cv2의 경우 numpy와 순서가 다른점 고려하여 중심 **(150, 100)**으로\n","    - 원의 지름이 세로의 3/5이므로 120픽셀을 칠해야 함. cv2.circle 함수의 경우 반지름을 인자로 받기 때문에 **60**을 입력\n","    - 색상의 경우 주어진 **(0,0,254)** 사용\n","    - 원 내부를 모두 칠해야해서 **-1**로"],"metadata":{"id":"C44_PKyu5Lj9"}},{"cell_type":"markdown","source":["### 10. 다음 코드의 실행 결과를 예상하기"],"metadata":{"id":"k_iXVZcR64Ot"}},{"cell_type":"code","source":["import threading\n","import time\n","\n","def func1():\n","    for i in range(10):\n","        print(f'fun1 : {i}')\n","        time.sleep(0.3)\n","def func2():\n","    for i in range(3):\n","        print(f'fun2 : {i}')\n","        time.sleep(1.3)\n","\n","print('p0')\n","\n","th1 = threading.Thread(target=func1)\n","th2 = threading.Thread(target=func2)\n","\n","print('p1')\n","\n","th1.start()\n","th2.start()\n","\n","print('p2')\n","\n","th1.join()\n","th2.join()\n","\n","print('p3')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BmDpDzPE3VS9","executionInfo":{"status":"ok","timestamp":1728187478978,"user_tz":-540,"elapsed":4347,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"eda60eee-b39d-4e50-e932-7c102c977dca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["p0\n","p1\n","fun1 : 0\n","fun2 : 0p2\n","\n","fun1 : 1\n","fun1 : 2\n","fun1 : 3\n","fun1 : 4\n","fun2 : 1\n","fun1 : 5\n","fun1 : 6\n","fun1 : 7\n","fun1 : 8\n","fun2 : 2\n","fun1 : 9\n","p3\n"]}]},{"cell_type":"markdown","source":["- p0\n","- p1\n","- fun1 : 0\n","- fun2 : 0\n","- p2\n","- fun1 : 1\n","- fun1 : 2\n","- fun1 : 3\n","- fun1 : 4\n","- fun2 : 1\n","- fun1 : 5\n","- fun1 : 6\n","- fun1 : 7\n","- fun1 : 8\n","- fun2 : 2\n","- fun1 : 9\n","- p3"],"metadata":{"id":"Vdq9jCVh_f_X"}},{"cell_type":"markdown","source":["### 11. numpy array bitwise 연산"],"metadata":{"id":"nVbvcasZBnQT"}},{"cell_type":"code","source":["a1 = np.array([0,1,0,1])\n","a2 = np.array([1,0,1,0])\n","a3 = np.array([0,0,1,1])\n","\n","print(f'1. [0 0 0 0] : {np.bitwise_and(a1,a2)}')\n","print(f'2. [1 1 1 1] : {np.bitwise_or(a1,a2)}')\n","print(f'3. [1 0 0 1] : {np.bitwise_xor(a2, a3)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L8BJlxVs_-yt","executionInfo":{"status":"ok","timestamp":1728189525288,"user_tz":-540,"elapsed":382,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"03084f58-4c99-45d3-ec96-d5d7d809d73c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1. [0 0 0 0] : [0 0 0 0]\n","2. [1 1 1 1] : [1 1 1 1]\n","3. [1 0 0 1] : [1 0 0 1]\n"]}]},{"cell_type":"markdown","source":["- 1번\n","    - 모두 0로 출력하기 위해 a1과 a2를 and\n","- 2번\n","    - 모두 1로 출력하기 위해 a1과 a2를 or\n","- 3번\n","    - 처음과 마지막만 1로 출력하기 위해 a2와 a3 xor"],"metadata":{"id":"m1LyjtIgHWmm"}},{"cell_type":"markdown","source":["### 12. 구구단 출력하기"],"metadata":{"id":"7MeuhEXPIGKl"}},{"cell_type":"code","source":["i = 1\n","while i <=9:\n","    j = 1\n","    while j <=9:\n","        print(f'{i} * {j} = {i*j}')\n","        j += 1\n","    i += 1"],"metadata":{"id":"TbHmtAHkDn_y","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1728287554098,"user_tz":-540,"elapsed":377,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"ac605840-1ee9-4a47-e967-9f95d9d084ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 * 1 = 1\n","1 * 2 = 2\n","1 * 3 = 3\n","1 * 4 = 4\n","1 * 5 = 5\n","1 * 6 = 6\n","1 * 7 = 7\n","1 * 8 = 8\n","1 * 9 = 9\n","2 * 1 = 2\n","2 * 2 = 4\n","2 * 3 = 6\n","2 * 4 = 8\n","2 * 5 = 10\n","2 * 6 = 12\n","2 * 7 = 14\n","2 * 8 = 16\n","2 * 9 = 18\n","3 * 1 = 3\n","3 * 2 = 6\n","3 * 3 = 9\n","3 * 4 = 12\n","3 * 5 = 15\n","3 * 6 = 18\n","3 * 7 = 21\n","3 * 8 = 24\n","3 * 9 = 27\n","4 * 1 = 4\n","4 * 2 = 8\n","4 * 3 = 12\n","4 * 4 = 16\n","4 * 5 = 20\n","4 * 6 = 24\n","4 * 7 = 28\n","4 * 8 = 32\n","4 * 9 = 36\n","5 * 1 = 5\n","5 * 2 = 10\n","5 * 3 = 15\n","5 * 4 = 20\n","5 * 5 = 25\n","5 * 6 = 30\n","5 * 7 = 35\n","5 * 8 = 40\n","5 * 9 = 45\n","6 * 1 = 6\n","6 * 2 = 12\n","6 * 3 = 18\n","6 * 4 = 24\n","6 * 5 = 30\n","6 * 6 = 36\n","6 * 7 = 42\n","6 * 8 = 48\n","6 * 9 = 54\n","7 * 1 = 7\n","7 * 2 = 14\n","7 * 3 = 21\n","7 * 4 = 28\n","7 * 5 = 35\n","7 * 6 = 42\n","7 * 7 = 49\n","7 * 8 = 56\n","7 * 9 = 63\n","8 * 1 = 8\n","8 * 2 = 16\n","8 * 3 = 24\n","8 * 4 = 32\n","8 * 5 = 40\n","8 * 6 = 48\n","8 * 7 = 56\n","8 * 8 = 64\n","8 * 9 = 72\n","9 * 1 = 9\n","9 * 2 = 18\n","9 * 3 = 27\n","9 * 4 = 36\n","9 * 5 = 45\n","9 * 6 = 54\n","9 * 7 = 63\n","9 * 8 = 72\n","9 * 9 = 81\n"]}]},{"cell_type":"code","source":["for i in range(1,10):\n","    for j in range(1,10):\n","        print(f'{i} * {j} = {i*j}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"9jX6n2YT9v3W","executionInfo":{"status":"ok","timestamp":1728287565674,"user_tz":-540,"elapsed":360,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"c6340607-8cc6-4613-9c1f-bd43d1a218ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 * 1 = 1\n","1 * 2 = 2\n","1 * 3 = 3\n","1 * 4 = 4\n","1 * 5 = 5\n","1 * 6 = 6\n","1 * 7 = 7\n","1 * 8 = 8\n","1 * 9 = 9\n","2 * 1 = 2\n","2 * 2 = 4\n","2 * 3 = 6\n","2 * 4 = 8\n","2 * 5 = 10\n","2 * 6 = 12\n","2 * 7 = 14\n","2 * 8 = 16\n","2 * 9 = 18\n","3 * 1 = 3\n","3 * 2 = 6\n","3 * 3 = 9\n","3 * 4 = 12\n","3 * 5 = 15\n","3 * 6 = 18\n","3 * 7 = 21\n","3 * 8 = 24\n","3 * 9 = 27\n","4 * 1 = 4\n","4 * 2 = 8\n","4 * 3 = 12\n","4 * 4 = 16\n","4 * 5 = 20\n","4 * 6 = 24\n","4 * 7 = 28\n","4 * 8 = 32\n","4 * 9 = 36\n","5 * 1 = 5\n","5 * 2 = 10\n","5 * 3 = 15\n","5 * 4 = 20\n","5 * 5 = 25\n","5 * 6 = 30\n","5 * 7 = 35\n","5 * 8 = 40\n","5 * 9 = 45\n","6 * 1 = 6\n","6 * 2 = 12\n","6 * 3 = 18\n","6 * 4 = 24\n","6 * 5 = 30\n","6 * 6 = 36\n","6 * 7 = 42\n","6 * 8 = 48\n","6 * 9 = 54\n","7 * 1 = 7\n","7 * 2 = 14\n","7 * 3 = 21\n","7 * 4 = 28\n","7 * 5 = 35\n","7 * 6 = 42\n","7 * 7 = 49\n","7 * 8 = 56\n","7 * 9 = 63\n","8 * 1 = 8\n","8 * 2 = 16\n","8 * 3 = 24\n","8 * 4 = 32\n","8 * 5 = 40\n","8 * 6 = 48\n","8 * 7 = 56\n","8 * 8 = 64\n","8 * 9 = 72\n","9 * 1 = 9\n","9 * 2 = 18\n","9 * 3 = 27\n","9 * 4 = 36\n","9 * 5 = 45\n","9 * 6 = 54\n","9 * 7 = 63\n","9 * 8 = 72\n","9 * 9 = 81\n"]}]},{"cell_type":"markdown","source":["### 13. 리스트의 중복 제거하는 함수 만들기"],"metadata":{"id":"uyVNRNvR97SY"}},{"cell_type":"code","source":["test = [1,1,2,3,3,3,4,4,5,5,5,9]\n","def remove_duplicates(lst):\n","    return list(set(lst))\n","\n","print(remove_duplicates(test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Db1UavIP98JN","executionInfo":{"status":"ok","timestamp":1728287698490,"user_tz":-540,"elapsed":327,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"03f8c270-d032-457b-888e-2918218c156a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 9]\n"]}]},{"cell_type":"markdown","source":["### 14.cv2 및 numpy를 활용해 라오스 국기 만들기(9번문제 심화)"],"metadata":{"id":"BS9ous4q-cTj"}},{"cell_type":"code","source":["import cv2\n","from google.colab.patches import cv2_imshow\n","import numpy as np\n","red = [38,17,206]\n","blue = [104,40,0]\n","white = [255,255,255]\n","\n","def solution(img):\n","    img[0:50,:] = red\n","    img[50:150,:] = blue\n","    img[150:200,:] = red\n","    cv2.circle(img,(150,100),40,white,-1)\n","\n","img1 = np.zeros((200,300,3),dtype=\"uint8\")\n","solution(img1)\n","cv2_imshow(img1)\n","cv2.waitKey(0)\n","cv2.destroyAllWindows()"],"metadata":{"id":"chBIv_Ad-dg1","colab":{"base_uri":"https://localhost:8080/","height":217},"executionInfo":{"status":"ok","timestamp":1728288765708,"user_tz":-540,"elapsed":375,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"7775436e-bcb0-40d8-9376-584ff75c2815"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=300x200>"],"image/png":"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\n","image/jpeg":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###15. dictionary 활용해 재고관리 프로그램 만들기"],"metadata":{"id":"m2FLXklTAYke"}},{"cell_type":"code","source":["inventory = {}\n","\n","def add_product(name, quantity):\n","    inventory[name] = quantity\n","\n","def print_products():\n","    for name, quantity in inventory.items():\n","        print(f\"제품명 : {name}, 수량 : {quantity}\")\n","\n","def print_products_by_quantity(threshold):\n","    for name, quantity in inventory.items():\n","        if quantity <= threshold:\n","            print(f\"제품명 : {name}, 수량 : {quantity}\")\n","\n","def save_products_to_file(filename):\n","    with open(filename, 'w') as file:\n","        for name, quantity in inventory.items():\n","            file.write(f\"{name},{quantity}\\n\")\n","\n","def load_products_from_file(filename):\n","    global inventory\n","    inventory = {}\n","    with open(filename, 'r') as file:\n","        for line in file:\n","            name, quantity = line.strip().split(',')\n","            inventory[name] = int(quantity)\n","\n","add_product(\"사과\", 10)\n","add_product(\"바나나\", 5)\n","print(\"<모든 제품 출력>\")\n","print_products()\n","print(\"\\n<수량이 5 이하인 제품>\")\n","print_products_by_quantity(5)\n","save_products_to_file(\"inventory.txt\")\n","inventory = {}\n","load_products_from_file(\"inventory.txt\")\n","print(\"\\n<파일에서 로드한 제품 출력>\")\n","print_products()"],"metadata":{"id":"RWgTyOJYAPGx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728288771193,"user_tz":-540,"elapsed":344,"user":{"displayName":"nawhead","userId":"00135151827127865190"}},"outputId":"67d28ff5-3980-4cca-888f-2a146a5dc3f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<모든 제품 출력>\n","제품명 : 사과, 수량 : 10\n","제품명 : 바나나, 수량 : 5\n","\n","<수량이 5 이하인 제품>\n","제품명 : 바나나, 수량 : 5\n","\n","<파일에서 로드한 제품 출력>\n","제품명 : 사과, 수량 : 10\n","제품명 : 바나나, 수량 : 5\n"]}]}]}